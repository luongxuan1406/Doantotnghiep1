{"ast":null,"code":"var _jsxFileName = \"D:\\\\tnfrontend\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Chatbot.css'; // Import the CSS file for chatbot styles\nimport axios from 'axios'; // Import Axios for HTTP requests\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false); // To show loading status\n\n  const toggleChatbot = () => {\n    setIsOpen(!isOpen);\n  };\n  const handleSendMessage = async () => {\n    if (input.trim()) {\n      const userMessage = input.trim();\n      setMessages([...messages, {\n        sender: 'user',\n        text: userMessage\n      }]);\n      setInput('');\n      setIsLoading(true);\n      try {\n        // Simulating an API call to Gemini (replace with actual API URL and headers)\n        const response = await axios.post('https://api.gemini.com/chat', {\n          message: userMessage\n        });\n        const botResponse = response.data.reply; // Assuming the response contains 'reply'\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: botResponse\n        }]);\n      } catch (error) {\n        console.error('Error fetching bot response:', error);\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: 'Sorry, I could not understand that.'\n        }]);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleChatbot,\n      className: \"chatbot-toggle\",\n      children: isOpen ? 'Close Chatbot' : 'Open Chatbot'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-messages\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chatbot-message ${msg.sender === 'user' ? 'chatbot-user' : 'chatbot-bot'}`,\n          children: msg.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 29\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatbot-message chatbot-bot\",\n          children: \"Typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          className: \"chatbot-input\",\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          className: \"chatbot-send\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"YPXps5YCmChneT2g4d5QQaTrQyA=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Chatbot","_s","isOpen","setIsOpen","messages","setMessages","input","setInput","isLoading","setIsLoading","toggleChatbot","handleSendMessage","trim","userMessage","sender","text","response","post","message","botResponse","data","reply","prevMessages","error","console","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["D:/tnfrontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Chatbot.css'; // Import the CSS file for chatbot styles\r\nimport axios from 'axios'; // Import Axios for HTTP requests\r\n\r\nconst Chatbot = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false); // To show loading status\r\n\r\n    const toggleChatbot = () => {\r\n        setIsOpen(!isOpen);\r\n    };\r\n\r\n    const handleSendMessage = async () => {\r\n        if (input.trim()) {\r\n            const userMessage = input.trim();\r\n            setMessages([...messages, { sender: 'user', text: userMessage }]);\r\n            setInput('');\r\n            setIsLoading(true);\r\n\r\n            try {\r\n                // Simulating an API call to Gemini (replace with actual API URL and headers)\r\n                const response = await axios.post('https://api.gemini.com/chat', {\r\n                    message: userMessage,\r\n                });\r\n\r\n                const botResponse = response.data.reply; // Assuming the response contains 'reply'\r\n                setMessages((prevMessages) => [\r\n                    ...prevMessages,\r\n                    { sender: 'bot', text: botResponse },\r\n                ]);\r\n            } catch (error) {\r\n                console.error('Error fetching bot response:', error);\r\n                setMessages((prevMessages) => [\r\n                    ...prevMessages,\r\n                    { sender: 'bot', text: 'Sorry, I could not understand that.' },\r\n                ]);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chatbot-container\">\r\n            <button onClick={toggleChatbot} className=\"chatbot-toggle\">\r\n                {isOpen ? 'Close Chatbot' : 'Open Chatbot'}\r\n            </button>\r\n            {isOpen && (\r\n                <div className=\"chatbot-box\">\r\n                    <div className=\"chatbot-messages\">\r\n                        {messages.map((msg, index) => (\r\n                            <div\r\n                                key={index}\r\n                                className={`chatbot-message ${msg.sender === 'user' ? 'chatbot-user' : 'chatbot-bot'\r\n                                    }`}\r\n                            >\r\n                                {msg.text}\r\n                            </div>\r\n                        ))}\r\n                        {isLoading && (\r\n                            <div className=\"chatbot-message chatbot-bot\">\r\n                                Typing...\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"chatbot-input-container\">\r\n                        <input\r\n                            type=\"text\"\r\n                            value={input}\r\n                            onChange={(e) => setInput(e.target.value)}\r\n                            className=\"chatbot-input\"\r\n                            placeholder=\"Type a message...\"\r\n                        />\r\n                        <button onClick={handleSendMessage} className=\"chatbot-send\">\r\n                            Send\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,eAAe,CAAC,CAAC;AACxB,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEnD,MAAMc,aAAa,GAAGA,CAAA,KAAM;IACxBP,SAAS,CAAC,CAACD,MAAM,CAAC;EACtB,CAAC;EAED,MAAMS,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAIL,KAAK,CAACM,IAAI,CAAC,CAAC,EAAE;MACd,MAAMC,WAAW,GAAGP,KAAK,CAACM,IAAI,CAAC,CAAC;MAChCP,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;QAAEU,MAAM,EAAE,MAAM;QAAEC,IAAI,EAAEF;MAAY,CAAC,CAAC,CAAC;MACjEN,QAAQ,CAAC,EAAE,CAAC;MACZE,YAAY,CAAC,IAAI,CAAC;MAElB,IAAI;QACA;QACA,MAAMO,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAAC,6BAA6B,EAAE;UAC7DC,OAAO,EAAEL;QACb,CAAC,CAAC;QAEF,MAAMM,WAAW,GAAGH,QAAQ,CAACI,IAAI,CAACC,KAAK,CAAC,CAAC;QACzChB,WAAW,CAAEiB,YAAY,IAAK,CAC1B,GAAGA,YAAY,EACf;UAAER,MAAM,EAAE,KAAK;UAAEC,IAAI,EAAEI;QAAY,CAAC,CACvC,CAAC;MACN,CAAC,CAAC,OAAOI,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpDlB,WAAW,CAAEiB,YAAY,IAAK,CAC1B,GAAGA,YAAY,EACf;UAAER,MAAM,EAAE,KAAK;UAAEC,IAAI,EAAE;QAAsC,CAAC,CACjE,CAAC;MACN,CAAC,SAAS;QACNN,YAAY,CAAC,KAAK,CAAC;MACvB;IACJ;EACJ,CAAC;EAED,oBACIV,OAAA;IAAK0B,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAC9B3B,OAAA;MAAQ4B,OAAO,EAAEjB,aAAc;MAACe,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EACrDxB,MAAM,GAAG,eAAe,GAAG;IAAc;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC,EACR7B,MAAM,iBACHH,OAAA;MAAK0B,SAAS,EAAC,aAAa;MAAAC,QAAA,gBACxB3B,OAAA;QAAK0B,SAAS,EAAC,kBAAkB;QAAAC,QAAA,GAC5BtB,QAAQ,CAAC4B,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACrBnC,OAAA;UAEI0B,SAAS,EAAE,mBAAmBQ,GAAG,CAACnB,MAAM,KAAK,MAAM,GAAG,cAAc,GAAG,aAAa,EAC7E;UAAAY,QAAA,EAENO,GAAG,CAAClB;QAAI,GAJJmB,KAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKT,CACR,CAAC,EACDvB,SAAS,iBACNT,OAAA;UAAK0B,SAAS,EAAC,6BAA6B;UAAAC,QAAA,EAAC;QAE7C;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CACR;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACNhC,OAAA;QAAK0B,SAAS,EAAC,yBAAyB;QAAAC,QAAA,gBACpC3B,OAAA;UACIoC,IAAI,EAAC,MAAM;UACXC,KAAK,EAAE9B,KAAM;UACb+B,QAAQ,EAAGC,CAAC,IAAK/B,QAAQ,CAAC+B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;UAC1CX,SAAS,EAAC,eAAe;UACzBe,WAAW,EAAC;QAAmB;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC,CAAC,eACFhC,OAAA;UAAQ4B,OAAO,EAAEhB,iBAAkB;UAACc,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAE7D;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAC9B,EAAA,CA/EID,OAAO;AAAAyC,EAAA,GAAPzC,OAAO;AAiFb,eAAeA,OAAO;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}