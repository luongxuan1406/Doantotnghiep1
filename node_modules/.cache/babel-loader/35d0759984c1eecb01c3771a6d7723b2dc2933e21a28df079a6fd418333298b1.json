{"ast":null,"code":"var _jsxFileName = \"D:\\\\tnfrontend\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Chatbot.css'; // Import the CSS file for chatbot styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const toggleChatbot = () => {\n    setIsOpen(!isOpen);\n  };\n  const handleSendMessage = () => {\n    if (input.trim()) {\n      const userMessage = input.trim();\n      setMessages([...messages, {\n        sender: 'user',\n        text: userMessage\n      }]);\n      setInput('');\n\n      // Simulate a bot response\n      setTimeout(() => {\n        const botResponse = getBotResponse(userMessage);\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: botResponse\n        }]);\n      }, 1000);\n    }\n  };\n  const getBotResponse = message => {\n    if (message.toLowerCase().includes('hello')) {\n      return 'Hi there! How can I help you today?';\n    } else if (message.toLowerCase().includes('help')) {\n      return 'Sure! Let me know what you need assistance with.';\n    } else if (message.toLowerCase().includes('bye')) {\n      return 'Goodbye! Have a great day!';\n    } else {\n      return 'I am not sure how to respond to that. Can you please clarify?';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleChatbot,\n      className: \"chatbot-toggle\",\n      children: isOpen ? 'Close Chatbot' : 'Open Chatbot'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-messages\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chatbot-message ${msg.sender === 'user' ? 'chatbot-user' : 'chatbot-bot'}`,\n          children: msg.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          className: \"chatbot-input\",\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          className: \"chatbot-send\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"Gh4s1GdJuG5uIMQtVEZqGMQgaRI=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","isOpen","setIsOpen","messages","setMessages","input","setInput","toggleChatbot","handleSendMessage","trim","userMessage","sender","text","setTimeout","botResponse","getBotResponse","prevMessages","message","toLowerCase","includes","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["D:/tnfrontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Chatbot.css'; // Import the CSS file for chatbot styles\r\n\r\nconst Chatbot = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n\r\n    const toggleChatbot = () => {\r\n        setIsOpen(!isOpen);\r\n    };\r\n\r\n    const handleSendMessage = () => {\r\n        if (input.trim()) {\r\n            const userMessage = input.trim();\r\n            setMessages([...messages, { sender: 'user', text: userMessage }]);\r\n            setInput('');\r\n\r\n            // Simulate a bot response\r\n            setTimeout(() => {\r\n                const botResponse = getBotResponse(userMessage);\r\n                setMessages((prevMessages) => [\r\n                    ...prevMessages,\r\n                    { sender: 'bot', text: botResponse },\r\n                ]);\r\n            }, 1000);\r\n        }\r\n    };\r\n\r\n    const getBotResponse = (message) => {\r\n        if (message.toLowerCase().includes('hello')) {\r\n            return 'Hi there! How can I help you today?';\r\n        } else if (message.toLowerCase().includes('help')) {\r\n            return 'Sure! Let me know what you need assistance with.';\r\n        } else if (message.toLowerCase().includes('bye')) {\r\n            return 'Goodbye! Have a great day!';\r\n        } else {\r\n            return 'I am not sure how to respond to that. Can you please clarify?';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chatbot-container\">\r\n            <button onClick={toggleChatbot} className=\"chatbot-toggle\">\r\n                {isOpen ? 'Close Chatbot' : 'Open Chatbot'}\r\n            </button>\r\n            {isOpen && (\r\n                <div className=\"chatbot-box\">\r\n                    <div className=\"chatbot-messages\">\r\n                        {messages.map((msg, index) => (\r\n                            <div\r\n                                key={index}\r\n                                className={`chatbot-message ${msg.sender === 'user' ? 'chatbot-user' : 'chatbot-bot'\r\n                                    }`}\r\n                            >\r\n                                {msg.text}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"chatbot-input-container\">\r\n                        <input\r\n                            type=\"text\"\r\n                            value={input}\r\n                            onChange={(e) => setInput(e.target.value)}\r\n                            className=\"chatbot-input\"\r\n                            placeholder=\"Type a message...\"\r\n                        />\r\n                        <button onClick={handleSendMessage} className=\"chatbot-send\">\r\n                            Send\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}